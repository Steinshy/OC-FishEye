import {selectorTypes as a} from'../../config.js';import {aria as b} from'./aria.js';import {inert as c} from'./inert.js';export let blurActive=()=>document.activeElement?.blur(),focusNext=(B,C,_c=!0)=>{let d=B.findIndex(_a=>_a===C);B[_c?(d+1)%B.length:Math.min(d+1,B.length-1)]?.focus();return B[_c?(d+1)%B.length:Math.min(d+1,B.length-1)]},createFocusCycle=(E,_B=a.focusable)=>{if(!E)return ()=>{};let aA=e=>{if(e.key!=='Tab')return;e.preventDefault();let aB=E.querySelectorAll(_B).filter(aD=>!aD.hasAttribute('disabled')&&!aD.hasAttribute('inert')&&aD.offsetParent!==null);if(!aB.length)return;let aC=aB.findIndex(aE=>aE===document.activeElement);aB[e.shiftKey?(aC<=0?aB.length-1:aC-1):aC===-1||aC>=aB.length-1?0:aC+1]?.focus()};document.addEventListener('keydown',aA);return ()=>document.removeEventListener('keydown',aA)},j=null,setupFocusCycle=(aG,aH,aI=0)=>{if(!aG)return;j=document.activeElement;b.setTabindex(aG,-1);i=createFocusCycle(aG,a.focusable);aH&&setTimeout(()=>aH.focus(),aI)},handleFocusEscape=(aK,aL)=>{(aK&&!aK.contains(aL.target))&&focusFirst(aK)};export let focusFirst=(A,_=a.focusable)=>(A?.querySelector(_)?.focus(),A?.querySelector(_));export let focusPrevious=(D,_b,_C=!0)=>{let _d=D.findIndex(_A=>_A===_b);D[_C?(_d<=0?D.length-1:_d-1):Math.max(_d-1,0)]?.focus();return D[_C?(_d<=0?D.length-1:_d-1):Math.max(_d-1,0)]};let i=null;export let toggleBackgroundContent=aF=>c.toggleBackgroundContent(aF,[a.main,a.header]);export let cleanupFocusCycle=aJ=>{aJ&&b.setTabindex(aJ,null);i&&(i(),i=null);j&&setTimeout(()=>{j?.focus();j=null},50)};export let resetFocusState=()=>{i=j=null};