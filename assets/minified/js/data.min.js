import {mediaCache as a} from'../../helpers/cache.js';import {buildPhotographer as b,buildPhotographerMedia as c,} from'../../helpers/dataBuilders.js';import {logData as d} from'../../helpers/logData.js';import {safeAsync as e} from'../errorHandler.js';const{isArray:f}=Array;let g='assets/api/data.json',h=async ()=>a.getOrCreate('photographersData','all',async ()=>{let A=await fetch(g,{cache:'force-cache',headers:{Accept:'application/json'}});if(!A.ok)throw Error(`Network error: ${A.status}`);const{photographers:_,media:B}=await A.json();if(!f(_)||!f(B))throw Error('Invalid data structure: photographers');return{photographers:_,media:B}}),getPhotographer=async C=>await e(async ()=>{let _a=(await h()).photographers.find(p=>p.id===C);if(!_a)throw Error(`Photographer not found: ${C}`);let _b=b(_a);d.photographer(_b);return _b});export let getPhotographerMedias=async D=>await e(async ()=>a.getOrCreate('photographerMedias',`media_${D}`,async ()=>{const{photographers:_A,media:_B}=await h();let _c=_A.find(p=>p.id===D);if(!_c)throw Error(`Photographer not found: ${D}`);let _d=_B.filter(E=>E.photographerId===D).map(aA=>c(aA,_c)).filter(Boolean);if(!_d.length)throw Error(`No media found for photographer: ${D}`);d.photographerMedias(_d,D,_c.name);return _d}),[]);