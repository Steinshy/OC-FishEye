export let aria={updateAttributes(a,b){if(!a)return;for(const[A,_] of Object.entries(b))_!=null?a.setAttribute(A,_):a.removeAttribute(A)},setExpanded(B,c){aria.updateAttributes(B,{'aria-expanded':c})},setHidden(C,_b){aria.updateAttributes(C,{'aria-hidden':_b})},setSelected(_a,d){for(const D of _a)aria.updateAttributes(D,{'aria-selected':D===d})},setActiveDescendant(_A,_B){aria.updateAttributes(_A,{'aria-activedescendant':_B?.id||null})},setDisabled(e,E){if(!e)return;e.disabled=E;aria.updateAttributes(e,{'aria-disabled':E})},setLive(aA,aB='polite'){aria.updateAttributes(aA,{'aria-live':aB})},setLabel(aC,aD){aria.updateAttributes(aC,{'aria-label':aD})},setDescribedBy(aE,aF){aria.updateAttributes(aE,{'aria-describedby':aF})},setRole(aG,aH){aria.updateAttributes(aG,{role:aH})},setTabindex(aI,aJ){if(!aI)return;aJ===null?aI.removeAttribute('tabindex'):aI.setAttribute('tabindex',`${aJ}`)},makeInteractive(aK,{role:_c='button',label:aL,tabindex:_d=0}={}){if(!aK)return;aria.setRole(aK,_c);aria.setTabindex(aK,_d);aL&&aria.setLabel(aK,aL)},toggleVisibility(aM,aN,_C='show'){if(!aM)return;aM.classList.toggle(_C,aN);aria.setHidden(aM,!aN)},isSelected(aO){return aO?.getAttribute('aria-selected')==='true'},isExpanded(aP){return aP?.getAttribute('aria-expanded')==='true'},isDisabled(aQ){return aQ?.hasAttribute('disabled')}};